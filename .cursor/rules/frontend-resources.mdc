---
globs: *.css,*.js,*.styl
description: 前端资源文件开发规范
---

# 前端资源文件开发规范

## CSS样式开发规范

### 文件结构
- **主样式文件**: [source/css/custom.css](mdc:blog-mds/source/css/custom.css)
- **主题样式**: [themes/butterfly/source/css/](mdc:blog-mds/themes/butterfly/source/css/)
- **Stylus文件**: 主题使用Stylus预处理器

### CSS编写规范

#### 1. 命名规范
```css
/* 使用BEM命名规范 */
.block {}
.block__element {}
.block--modifier {}

/* 示例 */
.post-card {}
.post-card__title {}
.post-card--featured {}
```

#### 2. 选择器优先级
```css
/* 避免过度嵌套，最多3层 */
.post {
    .post-header {
        .post-title {
            /* 最多3层嵌套 */
        }
    }
}
```

#### 3. 响应式设计
```css
/* 移动优先的响应式设计 */
.mobile-first {
    /* 默认移动端样式 */
}

@media (min-width: 768px) {
    .mobile-first {
        /* 平板样式 */
    }
}

@media (min-width: 1024px) {
    .mobile-first {
        /* 桌面样式 */
    }
}
```

### Butterfly主题样式定制

#### 1. 主题色彩定制
```css
/* 在custom.css中覆盖主题色彩 */
:root {
    --theme-color: #49B1F5;
    --theme-color-light: #A4D8FA;
    --theme-color-dark: #2c3e50;
}
```

#### 2. 组件样式定制
```css
/* 文章卡片样式 */
.post-card {
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: transform 0.3s ease;
}

.post-card:hover {
    transform: translateY(-2px);
}
```

#### 3. 动画效果
```css
/* 平滑过渡动画 */
.smooth-transition {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* 加载动画 */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.fade-in {
    animation: fadeIn 0.6s ease-out;
}
```

## JavaScript开发规范

### 文件结构
- **主脚本文件**: [source/js/nav-switches.js](mdc:blog-mds/source/js/nav-switches.js)
- **主题脚本**: [themes/butterfly/source/js/](mdc:blog-mds/themes/butterfly/source/js/)

### JavaScript编写规范

#### 1. 代码风格
```javascript
// 使用ES6+语法
const initNavigation = () => {
    // 箭头函数
    const navItems = document.querySelectorAll('.nav-item');
    
    navItems.forEach(item => {
        item.addEventListener('click', handleNavClick);
    });
};

// 使用const/let，避免var
let currentPage = 1;
const maxPages = 10;
```

#### 2. 事件处理
```javascript
// 使用事件委托
document.addEventListener('DOMContentLoaded', function() {
    // 页面加载完成后执行
    initNavigation();
    initThemeToggle();
    initSearch();
});

// 防抖函数
const debounce = (func, wait) => {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
};
```

#### 3. 模块化开发
```javascript
// 使用IIFE避免全局污染
(function() {
    'use strict';
    
    // 私有变量
    const config = {
        theme: 'light',
        animation: true
    };
    
    // 公共方法
    window.BlogUtils = {
        toggleTheme: function() {
            // 主题切换逻辑
        },
        
        initSearch: function() {
            // 搜索功能初始化
        }
    };
})();
```

### 主题功能扩展

#### 1. 主题切换
```javascript
// 主题切换功能
const ThemeToggle = {
    init() {
        this.bindEvents();
        this.loadTheme();
    },
    
    bindEvents() {
        const toggleBtn = document.querySelector('.theme-toggle');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', this.toggle.bind(this));
        }
    },
    
    toggle() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        this.setTheme(newTheme);
        this.saveTheme(newTheme);
    },
    
    setTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);
    },
    
    saveTheme(theme) {
        localStorage.setItem('theme', theme);
    },
    
    loadTheme() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        this.setTheme(savedTheme);
    }
};
```

#### 2. 搜索功能
```javascript
// 本地搜索功能
const LocalSearch = {
    init() {
        this.searchData = [];
        this.loadSearchData();
        this.bindEvents();
    },
    
    loadSearchData() {
        // 加载搜索数据
        fetch('/search.json')
            .then(response => response.json())
            .then(data => {
                this.searchData = data;
            });
    },
    
    bindEvents() {
        const searchInput = document.querySelector('.search-input');
        if (searchInput) {
            searchInput.addEventListener('input', 
                debounce(this.handleSearch.bind(this), 300)
            );
        }
    },
    
    handleSearch(event) {
        const query = event.target.value.toLowerCase();
        const results = this.searchData.filter(item => 
            item.title.toLowerCase().includes(query) ||
            item.content.toLowerCase().includes(query)
        );
        
        this.displayResults(results);
    },
    
    displayResults(results) {
        // 显示搜索结果
        const resultsContainer = document.querySelector('.search-results');
        if (resultsContainer) {
            resultsContainer.innerHTML = results.map(result => 
                `<div class="search-result-item">
                    <h3><a href="${result.url}">${result.title}</a></h3>
                    <p>${result.excerpt}</p>
                </div>`
            ).join('');
        }
    }
};
```

## Stylus开发规范

### 变量定义
```stylus
// 颜色变量
$primary-color = #49B1F5
$secondary-color = #00c4b6
$text-color = #2c3e50
$bg-color = #ffffff

// 尺寸变量
$border-radius = 8px
$spacing-unit = 16px
$max-width = 1200px

// 断点变量
$mobile = 768px
$tablet = 1024px
$desktop = 1200px
```

### 混合宏
```stylus
// 响应式混合宏
mobile()
    @media (max-width: $mobile)
        {block}

tablet()
    @media (min-width: $mobile) and (max-width: $tablet)
        {block}

desktop()
    @media (min-width: $tablet)
        {block}

// 使用示例
.post-card
    padding: $spacing-unit
    +mobile()
        padding: $spacing-unit / 2
    +desktop()
        padding: $spacing-unit * 1.5
```

### 嵌套规则
```stylus
// 合理的嵌套层级
.post
    margin-bottom: $spacing-unit
    
    &__header
        padding: $spacing-unit
        
    &__title
        font-size: 1.5rem
        color: $text-color
        
        &:hover
            color: $primary-color
            
    &__content
        line-height: 1.6
        
        p
            margin-bottom: $spacing-unit / 2
            
        code
            background: #f5f5f5
            padding: 2px 4px
            border-radius: 3px
```

## 性能优化

### CSS优化
1. **避免深层嵌套**：减少选择器复杂度
2. **使用CSS变量**：便于主题切换和维护
3. **关键CSS内联**：首屏样式内联
4. **CSS压缩**：生产环境压缩CSS

### JavaScript优化
1. **代码分割**：按需加载功能模块
2. **事件委托**：减少事件监听器数量
3. **防抖节流**：优化频繁触发的事件
4. **缓存策略**：合理使用localStorage

### 资源优化
1. **图片优化**：使用WebP格式，添加懒加载
2. **字体优化**：使用font-display: swap
3. **CDN加速**：静态资源使用CDN
4. **压缩资源**：启用Gzip压缩

## 调试技巧

### CSS调试
```css
/* 使用outline调试布局 */
.debug * {
    outline: 1px solid red;
}

/* 使用box-shadow调试定位 */
.debug-position {
    box-shadow: 0 0 0 1px red;
}
```

### JavaScript调试
```javascript
// 使用console.group组织日志
console.group('Navigation Debug');
console.log('Current page:', currentPage);
console.log('Navigation items:', navItems.length);
console.groupEnd();

// 使用performance API测量性能
const startTime = performance.now();
// 执行代码
const endTime = performance.now();
console.log(`执行时间: ${endTime - startTime}ms`);
```